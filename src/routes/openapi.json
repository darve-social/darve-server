{
  "openapi": "3.0.3",
  "info": {
    "title": "Darve Server API",
    "description": "API documentation for the Darve Server including users, posts, notifications, auth, discussions, tasks, wallet, and follows",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "",
      "description": "Development server"
    }
  ],
  "security": [],
  "paths": {
    "/api/auth/sign_with_facebook": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign in with Facebook",
        "description": "Authenticate user using Facebook token",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialSignInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        }
      }
    },
    "/api/auth/sign_with_apple": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign in with Apple",
        "description": "Authenticate user using Apple token",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialSignInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        }
      }
    },
    "/api/auth/sign_with_google": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign in with Google",
        "description": "Authenticate user using Google token",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialSignInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login with username and password",
        "description": "Authenticate user using username and password",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLoginInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AuthLoginInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register new user",
        "description": "Create a new user account",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRegisterInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AuthRegisterInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          }
        }
      }
    },
    "/api/forgot_password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request password reset",
        "description": "Send password reset email to user",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "400": {
            "description": "Invalid email or username"
          }
        }
      }
    },
    "/api/reset_password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset password",
        "description": "Reset user password using verification code",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid verification code or input"
          }
        }
      }
    },
    "/api/users/current/password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Set user password",
        "description": "Set password for current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password set successfully"
          },
          "400": {
            "description": "Invalid password"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user password",
        "description": "Update password for current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Password updated successfully."
                }
              }
            }
          },
          "400": {
            "description": "Invalid password"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get user notifications",
        "description": "Retrieve notifications for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Pagination start index",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of notifications to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "is_read",
            "in": "query",
            "description": "Filter by read status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "order_dir",
            "in": "query",
            "description": "Order direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserNotification"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications/read": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark all notifications as read",
        "description": "Mark all notifications as read for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications marked as read"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications/count": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get notification count",
        "description": "Get the count of notifications for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "is_read",
            "in": "query",
            "description": "Filter by read status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications/sse": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Server-sent events for notifications",
        "description": "Real-time notification stream using Server-Sent Events",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream of notifications",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications/{notification_id}/read": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark notification as read",
        "description": "Mark a specific notification as read",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "notification_id",
            "in": "path",
            "required": true,
            "description": "ID of the notification to mark as read",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    },
    "/api/tasks/received": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get received task requests",
        "description": "Get task requests received by the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by participant status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "ACCEPTED",
                "REJECTED",
                "COMPLETED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of received task requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskRequestView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks/given": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get given task requests",
        "description": "Get task requests created by the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of given task requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskRequestView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks/{task_id}/accept": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Accept task request",
        "description": "Accept a task request",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "ID of the task to accept",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task accepted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{task_id}/reject": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Reject task request",
        "description": "Reject a task request",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "ID of the task to reject",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task rejected successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{task_id}/deliver": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Deliver task",
        "description": "Mark a task as delivered",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "ID of the task to deliver",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliverTaskRequestInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task delivered successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{task_id}/donor": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Add or update donor",
        "description": "Add or update a donor for a task",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "ID of the task",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequestOfferInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequestOfferInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Donor added/updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/users/{user_id}/followers/count": {
      "get": {
        "tags": [
          "Follows"
        ],
        "summary": "Get user's followers count",
        "description": "Get the number of followers for a specific user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Followers count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of followers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/{user_id}/following/count": {
      "get": {
        "tags": [
          "Follows"
        ],
        "summary": "Get user's following count",
        "description": "Get the number of users a specific user is following",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Following count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of users being followed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/current/following/posts": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get posts from followed users",
        "description": "Get posts from users that the current user follows",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Posts from followed users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscussionPostView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/current/email/verification/start": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Start email verification",
        "description": "Start email verification process",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationStartInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationStartInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verification started"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/current/email/verification/confirm": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Confirm email verification",
        "description": "Confirm email verification with code",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationConfirmInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationConfirmInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "description": "Get current authenticated user information",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user",
        "description": "Update current user profile",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProfileSettingsFormInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalUser"
                }
              }
            }
          },
          "400": {
            "description": "Validation error - invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/current/posts": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create post for current user",
        "description": "Create a new post for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PostInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user posts",
        "description": "Get posts created by the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "topic_id",
            "in": "query",
            "description": "Filter by topic ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Pagination start index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of posts to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search users",
        "description": "Search for users",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocalUser"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/posts": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get posts",
        "description": "Get posts with optional filtering",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_dir",
            "in": "query",
            "description": "Order direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Pagination start index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of posts to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/posts/{post_id}/tasks": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Create task for post",
        "description": "Create a task related to a post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequestInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get tasks for post",
        "description": "Get tasks related to a post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks for the post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskRequestView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/posts/{post_id}/like": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Like a post",
        "description": "Like a specific post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post to like",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post liked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLikeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/posts/{post_id}/unlike": {
      "delete": {
        "tags": [
          "Posts"
        ],
        "summary": "Unlike a post",
        "description": "Remove like from a specific post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post to unlike",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post unliked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLikeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/posts/{post_id}/replies": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Create reply to post",
        "description": "Create a reply to a specific post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post to reply to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostReplyInput"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PostReplyInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reply created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get replies to post",
        "description": "Get replies to a specific post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Replies to the post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostReplyView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/posts/{post_id}/hide": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Hide post",
        "description": "Hide a post from specific users",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post to hide",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostHideShowData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post hidden successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/posts/{post_id}/unhide": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Unhide post",
        "description": "Unhide a post for specific users",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "ID of the post to unhide",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostHideShowData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post unhidden successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/discussions": {
      "get": {
        "tags": [
          "Discussions"
        ],
        "summary": "Get discussions",
        "description": "Get discussions for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of discussions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Discussion"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Discussions"
        ],
        "summary": "Create discussion",
        "description": "Create a new discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscussion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discussion created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discussion"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/discussions/{discussion_id}": {
      "patch": {
        "tags": [
          "Discussions"
        ],
        "summary": "Update discussion",
        "description": "Update a discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDiscussion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discussion updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Discussions"
        ],
        "summary": "Delete discussion",
        "description": "Delete a discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discussion deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/discussions/{discussion_id}/tasks": {
      "post": {
        "tags": [
          "Discussions"
        ],
        "summary": "Create task for discussion",
        "description": "Create a task related to a discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequestInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Discussions"
        ],
        "summary": "Get tasks for discussion",
        "description": "Get tasks related to a discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks for the discussion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskRequestView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/discussions/{discussion_id}/chat_users": {
      "post": {
        "tags": [
          "Discussions"
        ],
        "summary": "Add users to discussion",
        "description": "Add users to a discussion chat",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionUsers"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionUsers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users added to discussion"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Discussions"
        ],
        "summary": "Remove users from discussion",
        "description": "Remove users from a discussion chat",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionUsers"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionUsers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users removed from discussion"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/discussions/{discussion_id}/sse": {
      "get": {
        "tags": [
          "Discussions"
        ],
        "summary": "Discussion SSE stream",
        "description": "Server-sent events stream for discussion updates",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "query",
            "description": "Filter by topic ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream of discussion updates",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/discussions/{discussion_id}/posts": {
      "post": {
        "tags": [
          "Discussions"
        ],
        "summary": "Create post in discussion",
        "description": "Create a new post in a discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PostInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Discussions"
        ],
        "summary": "Get posts from discussion",
        "description": "Get posts from a specific discussion",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "discussion_id",
            "in": "path",
            "required": true,
            "description": "ID of the discussion",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "query",
            "description": "Filter by topic ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Pagination start index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of posts to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Posts from the discussion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/wallet/history": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get wallet transaction history",
        "description": "Get transaction history for the current user's wallet",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Pagination start index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet transaction history",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/balance": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get wallet balance",
        "description": "Get the current user's wallet balance",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet balance",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/wallet/withdraw": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Withdraw from wallet",
        "description": "Withdraw money from the current user's wallet",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawData"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal successful"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Invalid withdrawal amount or email not verified"
          }
        }
      }
    },
    "/api/wallet/deposit": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Deposit to wallet",
        "description": "Send money to the current user's wallet",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositData"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DepositData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stripe link ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "items": {
                    "$ref": "#/components/schemas/DepositLink"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/{user_id}/followers": {
      "get": {
        "tags": [
          "Follows"
        ],
        "summary": "Get user followers",
        "description": "Get followers of a specific user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of followers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserItemView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/{user_id}/following": {
      "get": {
        "tags": [
          "Follows"
        ],
        "summary": "Get users followed by user",
        "description": "Get users that a specific user is following",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of followed users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserItemView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/followers/{follow_user_id}": {
      "post": {
        "tags": [
          "Follows"
        ],
        "summary": "Follow user",
        "description": "Follow a specific user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "follow_user_id",
            "in": "path",
            "required": true,
            "description": "ID of the user to follow",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User followed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Follows"
        ],
        "summary": "Unfollow user",
        "description": "Unfollow a specific user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "follow_user_id",
            "in": "path",
            "required": true,
            "description": "ID of the user to unfollow",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User unfollowed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": [
          "Follows"
        ],
        "summary": "Check if following user",
        "description": "Check if current user is following a specific user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "follow_user_id",
            "in": "path",
            "required": true,
            "description": "ID of the user to check",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Following status checked successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SocialSignInput": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Social media authentication token"
          }
        }
      },
      "AuthLoginInput": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password (minimum 6 characters)"
          }
        }
      },
      "AuthRegisterInput": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password (minimum 6 characters)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "bio": {
            "type": "string",
            "description": "User biography"
          },
          "birth_day": {
            "type": "string",
            "format": "date-time",
            "description": "Birth date"
          },
          "full_name": {
            "type": "string",
            "minLength": 6,
            "description": "Full name (minimum 6 characters)"
          },
          "image_uri": {
            "type": "string",
            "minLength": 6,
            "description": "Profile image URI"
          }
        }
      },
      "ForgotPasswordInput": {
        "type": "object",
        "required": [
          "email_or_username"
        ],
        "properties": {
          "email_or_username": {
            "type": "string",
            "description": "Email address or username"
          }
        }
      },
      "ResetPasswordInput": {
        "type": "object",
        "required": [
          "password",
          "code",
          "email_or_username"
        ],
        "properties": {
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "New password (minimum 6 characters)"
          },
          "code": {
            "type": "string",
            "minLength": 6,
            "description": "Verification code"
          },
          "email_or_username": {
            "type": "string",
            "description": "Email address or username"
          }
        }
      },
      "SetPasswordInput": {
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password (minimum 6 characters)"
          }
        }
      },
      "ChangePasswordInput": {
        "type": "object",
        "required": [
          "old_password",
          "new_password"
        ],
        "properties": {
          "old_password": {
            "type": "string",
            "minLength": 6,
            "description": "Current password"
          },
          "new_password": {
            "type": "string",
            "minLength": 6,
            "description": "New password (minimum 6 characters)"
          }
        }
      },
      "DeliverTaskRequestInput": {
        "type": "object",
        "required": [
          "post_id"
        ],
        "properties": {
          "post_id": {
            "type": "string",
            "description": "ID of the post related to task delivery"
          }
        }
      },
      "TaskRequestOfferInput": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 100,
            "description": "Offer amount"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT authentication token"
          },
          "user": {
            "$ref": "#/components/schemas/LocalUser"
          }
        }
      },
      "LocalUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "full_name": {
            "type": "string",
            "nullable": true,
            "description": "Full name"
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Birth date"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Phone number"
          },
          "email_verified": {
            "type": "string",
            "nullable": true,
            "description": "Verified email address"
          },
          "bio": {
            "type": "string",
            "nullable": true,
            "description": "User biography"
          },
          "social_links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Social media links"
          },
          "image_uri": {
            "type": "string",
            "nullable": true,
            "description": "Profile image URI"
          }
        }
      },
      "UserNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Notification ID"
          },
          "created_by": {
            "type": "string",
            "description": "User who created the notification"
          },
          "event": {
            "$ref": "#/components/schemas/UserNotificationEvent"
          },
          "title": {
            "type": "string",
            "description": "Notification title"
          },
          "is_read": {
            "type": "boolean",
            "default": false,
            "description": "Whether the notification has been read"
          },
          "metadata": {
            "type": "object",
            "description": "Additional notification metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "UserNotificationEvent": {
        "type": "string",
        "enum": [
          "UserBalanceUpdate",
          "UserChatMessage",
          "UserCommunityPost",
          "UserFollowAdded",
          "UserLikePost",
          "UserTaskRequestCreated",
          "UserTaskRequestDelivered",
          "UserTaskRequestReceived"
        ],
        "description": "Type of notification event"
      },
      "TaskRequestView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task request ID"
          },
          "created_by": {
            "$ref": "#/components/schemas/UserView"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskRequestViewParticipant"
            },
            "description": "Task participants"
          },
          "request_txt": {
            "type": "string",
            "description": "Task request description"
          },
          "donors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskRequestDonorView"
            },
            "description": "Task donors"
          },
          "reward_type": {
            "$ref": "#/components/schemas/RewardType"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencySymbol"
          },
          "wallet_id": {
            "type": "string",
            "description": "Wallet ID"
          }
        }
      },
      "TaskRequestViewParticipant": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserView"
          },
          "status": {
            "$ref": "#/components/schemas/TaskParticipantStatus"
          }
        }
      },
      "TaskRequestDonorView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Donor ID"
          },
          "user": {
            "$ref": "#/components/schemas/UserView"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Donation amount"
          }
        }
      },
      "UserView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "full_name": {
            "type": "string",
            "description": "Full name"
          }
        }
      },
      "TaskParticipantStatus": {
        "type": "string",
        "enum": [
          "Requested",
          "Rejected",
          "Accepted",
          "Delivered"
        ],
        "description": "Status of task participant"
      },
      "RewardType": {
        "type": "string",
        "description": "Type of reward for the task"
      },
      "CurrencySymbol": {
        "type": "string",
        "description": "Currency symbol"
      },
      "EmailVerificationStartInput": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address to verify"
          }
        }
      },
      "EmailVerificationConfirmInput": {
        "type": "object",
        "required": [
          "email",
          "code"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "code": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "description": "6-digit verification code"
          }
        }
      },
      "ProfileSettingsFormInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true,
            "minLength": 6,
            "pattern": "^[A-Za-z0-9_]{6,}$",
            "description": "Username (optional) - Letters, numbers and '_'. Minimum 6 characters"
          },
          "full_name": {
            "type": "string",
            "minLength": 6,
            "nullable": true,
            "description": "Full name (minimum 6 characters, optional)"
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Birth date in RFC3339 format (optional) - Must be between 10 and 120 years ago"
          },
          "image_url": {
            "type": "string",
            "format": "binary",
            "nullable": true,
            "description": "Profile image file (optional)"
          },
          "social_links": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "nullable": true,
            "description": "Social media links (optional) - Must be HTTPS URLs from x.com, instagram.com, youtube.com, or facebook.com. No duplicate domains allowed."
          }
        }
      },
      "PostInput": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "minLength": 5,
            "description": "Post title (minimum 5 characters)"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "Post content (minimum 1 characters)"
          },
          "topic_id": {
            "type": "string",
            "description": "Topic ID for the post"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 5,
            "description": "Tags for the post (maximum 5)"
          },
          "file_1": {
            "type": "string",
            "format": "binary",
            "description": "Optional file attachment"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Post ID"
          },
          "belongs_to": {
            "type": "string",
            "description": "Discussion ID this post belongs to"
          },
          "created_by": {
            "type": "string",
            "description": "User ID who created the post"
          },
          "title": {
            "type": "string",
            "description": "Post title"
          },
          "content": {
            "type": "string",
            "description": "Post content"
          },
          "media_links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Media links attached to the post"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the post"
          },
          "likes_nr": {
            "type": "integer",
            "description": "Number of likes"
          },
          "replies_nr": {
            "type": "integer",
            "description": "Number of replies"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "r_updated": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "PostView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Post ID"
          },
          "created_by_name": {
            "type": "string",
            "description": "Username of post creator"
          },
          "belongs_to_uri": {
            "type": "string",
            "description": "URI of the discussion this post belongs to"
          },
          "belongs_to_id": {
            "type": "string",
            "description": "ID of the discussion this post belongs to"
          },
          "title": {
            "type": "string",
            "description": "Post title"
          },
          "content": {
            "type": "string",
            "description": "Post content"
          },
          "media_links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Media links"
          },
          "replies_nr": {
            "type": "integer",
            "description": "Number of replies"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "has_view_access": {
            "type": "boolean",
            "description": "Whether the viewer has access to this post"
          }
        }
      },
      "PostLikeResponse": {
        "type": "object",
        "properties": {
          "likes_count": {
            "type": "integer",
            "description": "Updated likes count"
          }
        }
      },
      "PostReplyInput": {
        "type": "object",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Reply ID (optional)"
          },
          "title": {
            "type": "string",
            "minLength": 5,
            "description": "Reply title (minimum 5 characters)"
          },
          "content": {
            "type": "string",
            "minLength": 5,
            "description": "Reply content (minimum 5 characters)"
          }
        }
      },
      "Reply": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Reply ID"
          },
          "discussion": {
            "type": "string",
            "description": "Discussion ID"
          },
          "belongs_to": {
            "type": "string",
            "description": "Post ID this reply belongs to"
          },
          "created_by": {
            "type": "string",
            "description": "User ID who created the reply"
          },
          "title": {
            "type": "string",
            "description": "Reply title"
          },
          "content": {
            "type": "string",
            "description": "Reply content"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "r_updated": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "PostReplyView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Reply ID"
          },
          "created_by": {
            "$ref": "#/components/schemas/UserView"
          },
          "title": {
            "type": "string",
            "description": "Reply title"
          },
          "content": {
            "type": "string",
            "description": "Reply content"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "Discussion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Discussion ID"
          },
          "title": {
            "type": "string",
            "description": "Discussion title"
          },
          "description": {
            "type": "string",
            "description": "Discussion description"
          },
          "created_by": {
            "type": "string",
            "description": "User ID who created the discussion"
          },
          "private_discussion_user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User IDs for private discussions"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "CreateDiscussion": {
        "type": "object",
        "required": [
          "community_id",
          "title",
          "private_discussion_users_final"
        ],
        "properties": {
          "community_id": {
            "type": "string",
            "example": "community-123"
          },
          "title": {
            "type": "string",
            "minLength": 5,
            "example": "My discussion title"
          },
          "image_uri": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com/image.png"
          },
          "chat_user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "user1",
              "user2"
            ]
          },
          "private_discussion_users_final": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "UpdateDiscussion": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Discussion title"
          },
          "description": {
            "type": "string",
            "description": "Discussion description"
          }
        }
      },
      "DiscussionUsers": {
        "type": "object",
        "required": [
          "user_ids"
        ],
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs"
          }
        }
      },
      "TaskRequestInput": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "minLength": 5,
            "description": "Task request description (min 5 characters)"
          },
          "participant": {
            "type": "string",
            "nullable": true,
            "description": "Optional participant identifier"
          },
          "offer_amount": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "nullable": true,
            "description": "Optional offer amount, must be at least 1"
          },
          "acceptance_period": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "nullable": true,
            "description": "Optional acceptance period in days"
          },
          "delivery_period": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "nullable": true,
            "description": "Optional delivery period in days"
          }
        }
      },
      "TaskRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task request ID"
          },
          "created_by": {
            "type": "string",
            "description": "User ID who created the task"
          },
          "request_txt": {
            "type": "string",
            "description": "Task request description"
          },
          "reward_type": {
            "$ref": "#/components/schemas/RewardType"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencySymbol"
          },
          "wallet_id": {
            "type": "string",
            "description": "Wallet ID"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "WithdrawData": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "minimum": 100,
            "description": "Amount to withdraw (minimum 100)"
          }
        }
      },
      "DepositData": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "minimum": 100,
            "description": "Amount to withdraw (minimum 100)"
          }
        }
      },
      "DepositLink": {
        "type": "string"
      },
      "UserItemView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "name": {
            "type": "string",
            "description": "Full name"
          },
          "image_url": {
            "type": "string",
            "description": "URL of the user's profile image"
          }
        }
      },
      "DiscussionPostView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Post ID"
          },
          "created_by_name": {
            "type": "string",
            "description": "Username of post creator"
          },
          "title": {
            "type": "string",
            "description": "Post title"
          },
          "content": {
            "type": "string",
            "description": "Post content"
          },
          "discussion_id": {
            "type": "string",
            "description": "Discussion ID"
          },
          "r_created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "PostHideShowData": {
        "type": "object",
        "required": [
          "user_ids"
        ],
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user IDs to hide/show the post for"
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "jwt"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Posts",
      "description": "Post management endpoints"
    },
    {
      "name": "Notifications",
      "description": "User notification endpoints"
    },
    {
      "name": "Tasks",
      "description": "Task management endpoints"
    },
    {
      "name": "Discussions",
      "description": "Discussion management endpoints"
    },
    {
      "name": "Wallet",
      "description": "Wallet and transaction endpoints"
    },
    {
      "name": "Follows",
      "description": "User following and follower endpoints"
    }
  ]
}